name: CI

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.commits.*.message, '[skip ci]') }}

    env:
      FLASK_ENV: test
      DB_HOST: 127.0.0.1
      DB_PORT: 3306
      DB_USERNAME: root
      DB_PASSWORD: ""
      AWS_ACCESS_KEY_ID: AWS_ACCESS_KEY_ID # Dummy AWS access key for testing
      AWS_SECRET_ACCESS_KEY: AWS_SECRET_ACCESS_KEY # Dummy AWS secret key for testing
      AWS_DEFAULT_REGION: ap-northeast-1
      AWS_DEFAULT_OUTPUT: json

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
          BIND_ADDRESS: 0.0.0.0
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Lint Dockerfiles using Hadolint
      - name: Lint Dockerfile for Gunicorn
        uses: hadolint/hadolint-action@v2
        with:
          dockerfile: ./docker/gunicorn/prod/Dockerfile

      - name: Lint Dockerfile for Nginx
        uses: hadolint/hadolint-action@v2
        with:
          dockerfile: ./docker/nginx/prod/Dockerfile

      # Set up Python environment
      - name: Set up Python 3.x
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"
          cache: "pip"

      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Wait for MySQL service to be ready
      - name: Wait for MySQL
        run: |
          for i in {1..30}; do
            if mysqladmin ping -h "${{ env.DB_HOST }}" --silent; then
              echo "MySQL is up!"
              break
            fi
            echo "Waiting for MySQL..."
            sleep 1
          done

      # Set up the database
      - name: Set up database
        env:
          DATABASE_URL: mysql+pymysql://${{ env.DB_USERNAME }}:${{ env.DB_PASSWORD }}@${{ env.DB_HOST }}:${{ env.DB_PORT }}/test_db
        run: |
          mysql -h ${{ env.DB_HOST }} -P ${{ env.DB_PORT }} -u ${{ env.DB_USERNAME }} -e "CREATE DATABASE IF NOT EXISTS test_db;"
          flask db upgrade

      # Set up MinIO for mocking AWS S3
      - name: Set up MinIO
        env:
          MINIO_ACCESS_KEY: minio_access_key
          MINIO_SECRET_KEY: minio_secret_key
        run: |
          docker run -d -p 9000:9000 --name minio \
                     -e "MINIO_ACCESS_KEY=${{ env.MINIO_ACCESS_KEY }}" \
                     -e "MINIO_SECRET_KEY=${{ env.MINIO_SECRET_KEY }}" \
                     -v /tmp/data:/data \
                     -v /tmp/config:/root/.minio \
                     minio/minio server /data
          pip install awscli
          aws --endpoint-url http://localhost:9000 s3 mb s3://my-test-bucket

      # Run linters (Flake8, Black)
      - name: Run linters
        run: |
          pip install flake8 black
          flake8 .
          black --check .

      # Set up Code Climate test reporter (optional)
      - name: Setup Code Climate test-reporter
        env:
          CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
        run: |
          curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
          chmod +x ./cc-test-reporter
          ./cc-test-reporter before-build

      # Run tests with pytest
      - name: Run tests
        env:
          DATABASE_URL: mysql+pymysql://${{ env.DB_USERNAME }}:${{ env.DB_PASSWORD }}@${{ env.DB_HOST }}:${{ env.DB_PORT }}/test_db
          AWS_S3_ENDPOINT: http://127.0.0.1:9000
          AWS_ACCESS_KEY_ID: ${{ env.MINIO_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ env.MINIO_SECRET_KEY }}
          FLASK_ENV: test
        run: |
          pytest

      # Upload coverage report to Code Climate (optional)
      - name: Upload coverage report
        if: success()
        env:
          CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
        run: |
          ./cc-test-reporter after-build --exit-code $?

      # Slack Notification on Failure (optional)
      - name: Slack Notification on Failure
        if: failure()
        uses: rtCamp/action-slack-notify@v2.1.0
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_USERNAME: GitHub Actions
          SLACK_TITLE: CI Workflow Failed
          SLACK_ICON: https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png
          SLACK_MESSAGE: "CI workflow failed for Run number: #${{ github.run_number }}"
          SLACK_COLOR: danger
